// @ts-check

import { writeFileSync, existsSync, rmSync } from "node:fs";
import { join } from "node:path";
import { argv, cwd, exit } from "node:process";
import { readPackageJson } from "./package-common-utils.mjs";

const shouldClear = argv.includes("clear");

const workingDir = cwd();
console.debug("Running script in dir:", workingDir);

const exports = getPackageExports();

if (shouldClear) {
  clearExportFiles(exports);
} else {
  generateExportFiles(exports);
}

exit(0);

/** @returns {Export[]} */
function getPackageExports() {
  const pkgJson = readPackageJson(workingDir);

  if (pkgJson.private) {
    console.error(
      "The package is private. Skipping the generation of export files."
    );
    exit(0);
  }

  if (!("exports" in pkgJson)) {
    console.error("The package does not contain 'exports' field.");
    exit(1);
  }

  const exports = Object.keys(pkgJson.exports ?? {})
    .filter((key) => key.startsWith("./"))
    .map((key) => {
      const value = pkgJson.exports?.[key];
      if (!value) {
        console.error(`The export "${key}" does not have a valid value.`);
        exit(1);
      }

      let path = "";
      if (typeof value === "string") {
        path = value;
      } else if (typeof value === "object") {
        path = value["require"] ?? value["default"] ?? value["import"];
      }
      if (!path) {
        console.error(`The export "${key}" does not have a valid path.`);
        exit(1);
      }

      return {
        key,
        name: key.replace("./", ""),
        path,
      };
    })
    .filter((item) => !item.name.includes("."));

  return exports;
}

/** @param {Export[]} exports */
function clearExportFiles(exports) {
  console.log(
    "Clearing files for exports: ",
    exports.map((item) => item.name)
  );
  for (const item of exports) {
    const jsFilepath = join(workingDir, `${item.name}.js`);
    const dtsFilepath = join(workingDir, `${item.name}.d.ts`);
    if (existsSync(jsFilepath)) rmSync(jsFilepath);
    if (existsSync(dtsFilepath)) rmSync(dtsFilepath);
  }

  console.log("Cleared export files.");
}

/** @param {Export[]} exports */
function generateExportFiles(exports) {
  console.log(
    "Generating files for exports: ",
    exports.map((item) => item.name)
  );

  const fileDisclaimer = `// This file is automatically generated to support backward compatibility with imports
// Do not edit it or commit it to the git. Only used for publishing to NPM.`;

  for (const item of exports) {
    writeFileSync(
      join(workingDir, `${item.name}.cjs`),
      `${fileDisclaimer}
module.exports = require("${item.path}");
`
    );
    writeFileSync(
      join(workingDir, `${item.name}.d.ts`),
      `${fileDisclaimer}
export * from "${item.path}";
`
    );
  }

  console.log("Generated export files.");
}

/**
 * @typedef {{
 *   key: string;
 *   name: string;
 *   path: string;
 * }} Export
 */
