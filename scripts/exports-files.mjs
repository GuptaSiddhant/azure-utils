// @ts-check

import { readFileSync, writeFileSync, existsSync, rmSync } from "node:fs";
import { join } from "node:path";
import { argv, cwd, exit } from "node:process";
import { readPackageJson } from "./package-common-utils.mjs";

const shouldClear = argv.includes("clear");

const workingDir = cwd();
console.debug("Running script in dir:", workingDir);

const exports = getPackageExports();

if (shouldClear) {
  clearExportFiles(exports);
} else {
  generateExportFiles(exports);
}

exit(0);

function getPackageExports() {
  const pkgJson = readPackageJson(workingDir);

  if (!("exports" in pkgJson) || pkgJson.private) {
    console.error(
      "The package is either private or does not contain 'exports' field."
    );
    exit(1);
  }

  const exports = Object.keys(pkgJson.exports ?? {})
    .filter((key) => key.startsWith("./"))
    .map((key) => key.replace("./", ""))
    .filter((key) => !key.includes("."));

  return exports;
}

/** @param {string[]} exports */
function clearExportFiles(exports) {
  console.log("Clearing files for exports: ", exports);
  for (const name of exports) {
    const jsFilepath = join(workingDir, `${name}.js`);
    const dtsFilepath = join(workingDir, `${name}.d.ts`);
    if (existsSync(jsFilepath)) rmSync(jsFilepath);
    if (existsSync(dtsFilepath)) rmSync(dtsFilepath);
  }

  console.log("Cleared export files.");
}

/** @param {string[]} exports */
function generateExportFiles(exports) {
  console.log("Generating files for exports: ", exports);

  const fileDisclaimer = `// This file is automatically generated to support backward compatibility with imports
// Do not edit it or commit it to the git. Only used for publishing to NPM.`;

  for (const name of exports) {
    writeFileSync(
      join(workingDir, `${name}.js`),
      `${fileDisclaimer}
module.exports = require("./cjs/${name}");
`
    );
    writeFileSync(
      join(workingDir, `${name}.d.ts`),
      `${fileDisclaimer}
export * from "./cjs/${name}";
`
    );
  }

  console.log("Generated export files.");
}
