/**
 * @module
 * Helper utils to interact with Azure Functions - Durable Task framework (v2).
 */

/**
 * Request options for Azure Functions Durable Task Webhook.
 */
export type RequestAzureFunctionsDurableTaskWebhookOptions = {
  /**
   * The base URL for the APIs mentioned in this article is the same as the base URL for your function app.
   * When developing locally using the Azure Functions Core Tools,
   * the base URL is typically http://localhost:7071.
   * In the Azure Functions hosted service, the base URL is typically https://{appName}.azurewebsites.net.
   * Custom hostnames are also supported if configured on your App Service app.
   */
  baseUrl: string;
  /**
   * The authorization key required to invoke the API.
   * systemKey is an authorization key autogenerated by the Azure Functions host.
   * It specifically grants access to the Durable Task extension APIs.
   */
  systemKey: string;
  /**
   * The name of the [task hub](https://learn.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-task-hubs).
   * If not specified, the current function app's task hub name is assumed.
   */
  taskHub?: string;
  /**
   * The name of the connection app setting for the backend storage provider.
   * If not specified, the default connection configuration for the function app is assumed.
   */
  connection?: string;
  /**
   * The abort signal to cancel the request.
   */
  abortSignal?: AbortSignal;
  /**
   * The HTTP method to use for the request.
   */
  method?: "POST" | "GET" | "DELETE" | "PUT";
  /**
   * The request body to send with the request.
   */
  body?: BodyInit;
  /**
   * The URL search parameters to include in the request.
   */
  searchParams?: URLSearchParamsInit;
  /**
   * The headers to include in the request.
   */
  headers?: HeadersInit;
};

/**
 * Makes an HTTP Request to Azure Functions Durable Task Webhook.
 * @param path URL path to the Durable Task Webhook API.
 * @param requestOptions Options for the request.
 * @returns The HTTP response from the Durable Task Webhook API.
 */
export async function requestAzureFunctionsDurableTaskWebhookOrThrow(
  path: string,
  requestOptions: RequestAzureFunctionsDurableTaskWebhookOptions
): Promise<Response> {
  const {
    abortSignal,
    baseUrl,
    systemKey,
    connection,
    taskHub,
    body,
    method,
    searchParams,
    headers,
  } = requestOptions;

  if (!baseUrl) {
    throw new Error("Azure Functions base URL is required.");
  }

  const urlSearchParams = new URLSearchParams(searchParams);
  if (systemKey) {
    urlSearchParams.set("code", systemKey);
  }
  if (taskHub) {
    urlSearchParams.set("taskHub", taskHub);
  }
  if (connection) {
    urlSearchParams.set("connection", connection);
  }

  const url = new URL(`/runtime/webhooks/durabletask/${path}`, baseUrl);
  url.search = urlSearchParams.toString();

  const response = await fetch(url, {
    method,
    body,
    headers,
    signal: abortSignal,
  });

  if (!response.ok) {
    const cause = await response
      .clone()
      .json()
      .catch(() => {});

    throw new Error(
      `Failed to request Azure Functions Durable Webhook: ${response.status} ${response.statusText}`,
      { cause }
    );
  }

  return response;
}

type URLSearchParamsInit =
  | string[][]
  | Record<string, string>
  | string
  | URLSearchParams;
